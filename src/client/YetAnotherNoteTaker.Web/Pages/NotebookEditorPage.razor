@page "/notebooks/editor"

@using Microsoft.AspNetCore.WebUtilities

@inject INotebooksService _service
@inject IUserState _userState
@inject NavigationManager _navigation
@inject IJSRuntime JsRuntime

<form class="login-form">
    <h2>@(title)</h2>
    <div class="form-group">
        <label for="name">Notebook name</label>
        <input type="text" class="form-control" id="name" aria-describedby="name" placeholder="Notebook name" @bind-value="name">
    </div>

    <div class="crud-actions">
        <button type="button" class="btn btn-primary btn-action-save" @onclick="Save">Save</button>
        <button type="button" class="btn btn-danger btn-action-cancel" @onclick="Cancel">Cancel</button>
    </div>
</form>

@code {
    private string title = "New notebook";
    private bool isNew = true;
    private string notebookKey;
    private string name;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var uri = _navigation.ToAbsoluteUri(_navigation.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("notebookKey", out var param))
        {
            notebookKey = param.First();
            var userEmail = await _userState.GetUserEmail();
            var dto = await _service.Get(userEmail, notebookKey);
            title = dto.Name;
            name = dto.Name;
            notebookKey = dto.Key;
            isNew = false;
        }
        else
        {
            title = "New notebook";
            isNew = true;
        }

        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Save()
    {
        var userEmail = await _userState.GetUserEmail();

        NotebookDto dto = null;

        if (isNew)
        {
            dto = await _service.Create(userEmail, new NotebookDto
            {
                Name = name
            });
        }
        else
        {
            dto = await _service.Update(userEmail, new NotebookDto
            {
                Key = notebookKey,
                Name = name
            });
        }

        _navigation.NavigateTo($"/notebooks/{dto.Key}/notes", true);
    }

    private async Task Cancel()
    {
        await JsRuntime.InvokeVoidAsync("window.history.back");
    }

}