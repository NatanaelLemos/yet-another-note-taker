@inherits LayoutComponentBase
@inject IUserState _userState
@inject IAuthService _service
@inject IJSRuntime JsRuntime
@inject NavigationManager _navigation

<link rel="stylesheet" href="css/login.css" />

@if (isInLoginPage)
{
    <form class="login-form">
        <h2>Login</h2>
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" aria-describedby="email" placeholder="Enter email" @bind-value="email">
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" class="form-control" id="password" placeholder="Password" @bind-value="password">
        </div>
        <button type="button" class="btn btn-primary" @onclick="Login">Login</button>
        <button type="button" class="btn btn-secondary" @onclick="GoToRegister">Register</button>
    </form>
}
else
{
    <form class="register-form">
        <h2>Register</h2>
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" aria-describedby="email" placeholder="Enter email" @bind-value="email">
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" class="form-control" id="password" placeholder="Password" @bind-value="password">
        </div>
        <div class="form-group">
            <label for="repeatPassword">Repeat password</label>
            <input type="password" class="form-control" id="repeatPassword" placeholder="Repeat password" @bind-value="repeatPassword">
        </div>
        <button type="button" class="btn btn-primary" @onclick="Register">Register</button>
        <button type="button" class="btn btn-secondary" @onclick="GoToLogin">Back</button>
    </form>
}

@code {
    private string email;
    private string password;
    private string repeatPassword;
    private bool isInLoginPage = true;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    public async Task Login()
    {
        try
        {
            var loginResult = await _service.Login(email, password);
            await _userState.SetUserEmail(email);
            await _userState.SetToken(loginResult.AccessToken);

            _navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }

    public void GoToRegister()
    {
        email = password = repeatPassword = string.Empty;
        isInLoginPage = false;
    }

    public async Task Register()
    {
        try
        {
            var loginResult = await _service.CreateUser(new Common.Dtos.NewUserDto { Email = email, Password = password });
            _navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }

    public void GoToLogin()
    {
        email = password = repeatPassword = string.Empty;
        isInLoginPage = true;
    }
}