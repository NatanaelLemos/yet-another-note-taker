@inherits LayoutComponentBase

@using YetAnotherNoteTaker.Client.Common.Events.AuthEvents

@inject IJSRuntime _js
@inject NavigationManager _navigation
@inject IEventBroker _eventBroker

<link rel="stylesheet" href="css/login.css" />

@if (isInLoginPage)
{
    <form class="login-form">
        <h2>Login</h2>
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email"
                   id="email"
                   class="form-control"
                   aria-describedby="email"
                   placeholder="Enter email"
                   @bind-value="email"
                   @onkeydown="OnEmailKeyDown" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <input type="password"
                   id="password"
                   class="form-control"
                   placeholder="Password"
                   @bind-value="password"
                   @onkeydown="OnLoginPasswordKeyDown" />
        </div>
        <button type="button" class="btn btn-primary" @onclick="Login">Login</button>
        <button type="button" class="btn btn-secondary" @onclick="GoToRegister">Register</button>
    </form>
}
else
{
    <form class="register-form">
        <h2>Register</h2>
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email"
                   id="email"
                   class="form-control"
                   aria-describedby="email"
                   placeholder="Enter email"
                   @bind-value="email"
                   @onkeydown="OnEmailKeyDown" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <input type="password"
                   id="password"
                   class="form-control"
                   placeholder="Password"
                   @bind-value="password"
                   @onkeydown="OnRegisterPasswordKeyDown" />
        </div>
        <div class="form-group">
            <label for="repeatPassword">Repeat password</label>
            <input type="password"
                   class="form-control"
                   id="repeatPassword"
                   placeholder="Repeat password"
                   @bind-value="repeatPassword"
                   @onkeydown="OnRegisterRepeatPasswordKeyDown" />
        </div>
        <button type="button" class="btn btn-primary" @onclick="Register">Register</button>
        <button type="button" class="btn btn-secondary" @onclick="GoToLogin">Back</button>
    </form>
}

@code {
    private string email;
    private string password;
    private string repeatPassword;
    private bool isInLoginPage = true;

    private async Task OnEmailKeyDown(KeyboardEventArgs e)
    {
        if (e.IsSubmit())
        {
            await _js.FocusElement("password");
        }
    }

    private async Task OnLoginPasswordKeyDown(KeyboardEventArgs e)
    {
        if (e.IsSubmit())
        {
            await Login();
        }
    }

    private async Task OnRegisterPasswordKeyDown(KeyboardEventArgs e)
    {
        if (e.IsSubmit())
        {
            await _js.FocusElement("repeatPassword");
        }
    }

    private async Task OnRegisterRepeatPasswordKeyDown(KeyboardEventArgs e)
    {
        if (e.IsSubmit())
        {
            await Register();
        }
    }

    public async Task Login()
    {
        try
        {
            await _eventBroker.Notify(new LoginCommand(email, password));
            _navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await _js.Alert(ex.Message);
        }
    }

    public void GoToRegister()
    {
        email = password = repeatPassword = string.Empty;
        isInLoginPage = false;
        StateHasChanged();
    }

    public async Task Register()
    {
        try
        {
            await _eventBroker.Notify(new CreateUserCommand(email, password));
            GoToLogin();
        }
        catch (Exception ex)
        {
            await _js.Alert(ex.Message);
        }
    }

    public void GoToLogin()
    {
        email = password = repeatPassword = string.Empty;
        isInLoginPage = true;
        StateHasChanged();
    }
}