@page  "/notebooks/{NotebookKey}/notes/editor"

@using YetAnotherNoteTaker.Client.Common.Events.NoteEvents

@inject IJSRuntime _js
@inject IEventBroker _eventBroker
@inject NavigationManager _navigation
@inject YetAnotherNoteTaker.Client.Common.Services.INotesService _noteService

<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.css" />
<link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/monokai-sublime.min.css" />
<link rel="stylesheet" href="css/quill_light.css" />

<h2>@title</h2>

<div>
    <label for="name">Note name</label>
    <input type="text" class="form-control" id="name" aria-describedby="name" placeholder="Note name" @bind-value="name">
</div>

<div id="quill-div">
    <div id="toolbar-container">
        <span class="ql-formats">
            <select class="ql-font"></select>
            <select class="ql-size"></select>
        </span>
        <span class="ql-formats">
            <button class="ql-bold"></button>
            <button class="ql-italic"></button>
            <button class="ql-underline"></button>
        </span>
        <span class="ql-formats">
            <select class="ql-color"></select>
            <select class="ql-background"></select>
        </span>
        <span class="ql-formats">
            <button class="ql-script" value="sub"> </button>
            <button class="ql-script" value="super"></button>
        </span>
        <span class="ql-formats">
            <button class="ql-header" value="1"></button>
            <button class="ql-header" value="2"></button>
            <button class="ql-blockquote"></button>
            <button class="ql-code-block"></button>
        </span>
        <span class="ql-formats">
            <button class="ql-list" value="ordered"></button>
            <button class="ql-list" value="bullet"></button>
            <button class="ql-indent" value="-1"></button>
            <button class="ql-indent" value="+1"></button>
            <button value="todo" id="btnTodo">
                <svg class="" viewbox="0 0 18 18">
                    <line class="ql-stroke" x1="9" x2="15" y1="4" y2="4"></line>
                    <polyline class="ql-stroke" points="3 4 4 5 6 3"></polyline>
                    <line class="ql-stroke" x1="9" x2="15" y1="14" y2="14"></line>
                    <polyline class="ql-stroke" points="3 14 4 15 6 13"></polyline>
                    <line class="ql-stroke" x1="9" x2="15" y1="9" y2="9"></line>
                    <polyline class="ql-stroke" points="3 9 4 10 6 8"></polyline>
                </svg>
            </button>
        </span>
        <span class="ql-formats">
            <select class="ql-align"></select>
            <button class="ql-link"></button>
            <button class="ql-image"></button>
        </span>
    </div>
    <div id="editor-container">
    </div>
</div>

<div class="crud-actions">
    @if (note != null)
    {
        <button class="btn btn-topbar" @onclick="Delete">Delete</button>
    }
    <button class="btn btn-topbar" @onclick="Save">Save</button>
    <button class="btn btn-topbar" @onclick="Cancel">Cancel</button>
</div>

@code{

    [Parameter]
    public string NotebookKey { get; set; }

    private string noteKey;
    private NoteDto note;

    private string title = "New note";
    private string name;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var uri = _navigation.ToAbsoluteUri(_navigation.Uri);
        noteKey = NoteHelpers.GetKeyFromUri(uri);

        if (firstRender || noteKey != note?.Key)
        {
            note = await _noteService.Get(NotebookKey, noteKey);
            await BindValues();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task BindValues()
    {
        var body = string.Empty;

        if (note == null)
        {
            title = "New note";
            name = string.Empty;
        }
        else
        {
            title = note.Name;
            name = note.Name;
            body = note.Body;
        }

        await _js.InvokeVoidAsync("startQuill", $"{body}");
    }

    private async Task Delete()
    {
        var confirm = await _js.Confirm("Are you sure?");

        if (confirm)
        {
            await _eventBroker.Notify(new DeleteNoteCommand(NotebookKey, note.Key));
            _navigation.NavigateTo($"/notebooks/{NotebookKey}/notes");
        }
    }

    private async Task Save()
    {
        var body = await _js.InvokeAsync<string>("getQuillContent");
        await _eventBroker.Notify(
            new EditNoteCommand(
                    NotebookKey,
                    noteKey,
                    name,
                    body));

        await _js.NavigateBack();
    }

    private Task Cancel()
    {
        return _js.NavigateBack();
    }
}