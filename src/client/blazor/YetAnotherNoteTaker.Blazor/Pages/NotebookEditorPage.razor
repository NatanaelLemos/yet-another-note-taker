@page "/notebooks/editor"

@using Microsoft.AspNetCore.WebUtilities
@using YetAnotherNoteTaker.Client.Common.Events.NotebookEvents

@inject IJSRuntime JsRuntime
@inject NavigationManager _navigation
@inject IEventBroker _eventBroker
@inject YetAnotherNoteTaker.Client.Common.Services.INotebooksService _notebookService

<form class="login-form">
    <h2>@(title)</h2>
    <div class="form-group">
        <label for="name">Notebook name</label>
        <input type="text" class="form-control" id="name" aria-describedby="name" placeholder="Notebook name" @bind-value="name">
    </div>

    <div class="crud-actions">
        <button type="button" class="btn btn-primary btn-action-save" @onclick="Save">Save</button>
        <button type="button" class="btn btn-danger btn-action-cancel" @onclick="Cancel">Cancel</button>
    </div>
</form>

@code {
    private string notebookKey;
    private NotebookDto notebook;

    private string title = "New notebook";
    private string name;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var uri = _navigation.ToAbsoluteUri(_navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("notebookKey", out var param))
        {
            notebookKey = param.First();
        }
        else
        {
            notebookKey = null;
        }

        if (firstRender)
        {
            _eventBroker.Subscribe<EditNotebookResult>(EditNotebookResultHandler);
        }

        if (firstRender || notebookKey != notebook?.Key)
        {
            notebook = await _notebookService.Get(notebookKey);

            if (notebook == null)
            {
                title = "New notebook";
                name = string.Empty;
            }
            else
            {
                title = notebook.Name;
                name = notebook.Name;
            }

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Save()
    {
        await _eventBroker.Notify(new EditNotebookCommand(notebookKey, name));
        await _eventBroker.Notify(new ListNotebooksCommand());
    }

    private async Task Cancel()
    {
        await JsRuntime.InvokeVoidAsync("window.history.back");
    }

    private Task EditNotebookResultHandler(EditNotebookResult result)
    {
        _navigation.NavigateTo($"/notebooks/{result.Notebook.Key}/notes");
        return Task.CompletedTask;
    }
}