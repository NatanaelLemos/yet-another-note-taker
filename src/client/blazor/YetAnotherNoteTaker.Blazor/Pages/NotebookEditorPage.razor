@page "/notebooks/editor"

@using YetAnotherNoteTaker.Client.Common.Events.NotebookEvents

@inject IJSRuntime _js
@inject NavigationManager _navigation
@inject IEventBroker _eventBroker
@inject YetAnotherNoteTaker.Client.Common.Services.INotebooksService _notebookService

<form class="login-form">
    <h2>@(title)</h2>
    <div class="form-group">
        <label for="name">Notebook name</label>
        <input type="text"
               class="form-control"
               id="name"
               aria-describedby="name"
               placeholder="Notebook name"
               @bind-value="name"
               @onkeydown="OnNameKeyDown"/>
    </div>

    <div class="crud-actions">
        <button type="button" class="btn btn-topbar" @onclick="Save">Save</button>
        <button type="button" class="btn btn-topbar" @onclick="Cancel">Cancel</button>
    </div>
</form>

@code {
    private string notebookKey;
    private NotebookDto notebook;

    private string title = "New notebook";
    private string name;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var uri = _navigation.ToAbsoluteUri(_navigation.Uri);
        notebookKey = NotebookHelpers.GetKeyFromUri(uri);

        if (firstRender)
        {
            _eventBroker.Subscribe<EditNotebookResult>(EditNotebookResultHandler);
        }

        if (firstRender || notebookKey != notebook?.Key)
        {
            notebook = await _notebookService.Get(notebookKey);
            BindValues();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void BindValues()
    {
        if (notebook == null)
        {
            title = "New notebook";
            name = string.Empty;
        }
        else
        {
            title = notebook.Name;
            name = notebook.Name;
        }
    }

    private Task OnNameKeyDown(KeyboardEventArgs e)
    {
        if(e.IsSubmit())
        {
            return Save();
        }

        return Task.CompletedTask;
    }

    private async Task Save()
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            await _js.Alert("Invalid notebook name");
            return;
        }

        await _eventBroker.Notify(new EditNotebookCommand(notebookKey, name));
    }

    private Task Cancel()
    {
        return _js.NavigateBack();
    }

    private async Task EditNotebookResultHandler(EditNotebookResult result)
    {
        await _eventBroker.Notify(new ListNotebooksCommand());
        _navigation.NavigateTo($"/notebooks/{result.Notebook.Key}/notes");
    }
}