@using YetAnotherNoteTaker.Client.Common.Events.NoteEvents

@inject NavigationManager _navigation
@inject IEventBroker _eventBroker
@inject YetAnotherNoteTaker.Client.Common.Services.INotebooksService _notebooksService

<h2>@(notebook?.Name ?? "All notes")</h2>

@if (notebook != null)
{
    var newNoteUrl = $"/notebooks/{NotebookKey}/notes/editor";
    <div class="crud-actions">
        <NavLink class="btn btn-topbar" href="@newNoteUrl">New note</NavLink>
    </div>
}

<table class="table table-striped table-hover">
    <tbody>
        @foreach (var note in notes)
        {
            var url = $"/notebooks/{note.NotebookKey}/notes/editor?noteKey={note.Key}";

            <tr>
                <td>
                    <NavLink class="nav-link" href="@url">
                        @note.Name
                    </NavLink>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {

    [Parameter]
    public string NotebookKey { get; set; }

    private NotebookDto notebook;
    private List<NoteDto> notes = new List<NoteDto>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _eventBroker.Subscribe<ListNotesResult>(ListNotesResultHandler);
            StateHasChanged();
        }

        if (firstRender || notebook?.Key != NotebookKey)
        {
            await _eventBroker.Notify(new ListNotesCommand(NotebookKey));

            if (!string.IsNullOrWhiteSpace(NotebookKey))
            {
                notebook = await _notebooksService.Get(NotebookKey);
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private Task ListNotesResultHandler(ListNotesResult arg)
    {
        notes.Clear();
        foreach (var item in arg.Notes)
        {
            notes.Add(item);
        }

        StateHasChanged();
        return Task.CompletedTask;
    }
}